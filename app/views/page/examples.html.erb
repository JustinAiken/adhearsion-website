<script type="text/javascript">
  $(document).ready(function() {
    $(".examples").accordion({
      alwaysOpen: false,
      header: "h3",
      active: true,
      autoHeight: false
    });
  });
</script>

<% title "Dialplan Examples" %>

<p>The "dialplan" is the main place where you control phone calls with Adhearsion. When you create a new Adhearsion app, you'll immediately see the <code>dialplan.rb</code> file in which you can begin writing your custom telephony app's realtime call control logic. The examples should help you get started.</p>

<div class="examples">

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Play a sound file</a></h3>
    <div class="content-html">
      <p>When using Adhearsion with Asterisk, you have <a href="http://www.voip-info.org/wiki/view/Asterisk+sound+files">hundreds</a> of sound files to use right out of the box.</p>

      <p>These range from the useful everyday sound files to pure novelties such as monkeys screaming and practical jokes.</p>

      <p>To play a sound file, use the <a href="http://api.adhearsion.com/Adhearsion/VoIP/Asterisk/Commands.html#play-instance_method"><code>play</code></a> method like below.</p>

      <pre class="syntax-ruby"><span class="ident">play</span> <span class="punct">"</span><span class="string">hello-world</span><span class="punct">"</span>
      </pre>

      <p>You can play multiple files in sequence too.</p>

      <pre class="syntax-ruby"><span class="ident">play</span> <span class="punct">"</span><span class="string">please-enter-your</span><span class="punct">",</span> <span class="punct">"</span><span class="string">extension</span><span class="punct">"</span>
      </pre>

      <p>If this is your first time seeing Ruby, <code>play</code> is actually a method. Ruby does not require you wrap a method's arguments with parenthesis.</p>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Sharing variables between contexts</a></h3>
    <div class="content-html">
      <p>Adhearsion creates a number of variables for you when it runs your dialplan which are available in any context you may jump around to.</p>

      <p>For example, the following dialplan will speak back whatever extension the user dials.</p>

      <pre class="syntax-ruby"><span class="ident">adhearsion</span> <span class="punct">{</span>
        <span class="ident">play</span> <span class="ident">extension</span>
      <span class="punct">}</span>
      </pre>

      <p>The <code>extension</code> variable in this case is actually not an variable. It's a method that, because of Ruby's cleanliness, simply look like local variable. This may be a little confusing to you at first. Consider the following example:</p>

      <pre class="syntax-ruby"><span class="ident">adhearsion</span> <span class="punct">{</span>
        <span class="ident">extension</span> <span class="punct">=</span> <span class="ident">extension</span> <span class="punct">+</span> <span class="number">1</span>
        <span class="ident">play</span> <span class="ident">extension</span>
        <span class="punct">+</span><span class="ident">player</span>
      <span class="punct">}</span>
      <span class="ident">player</span> <span class="punct">{</span>
        <span class="ident">play</span> <span class="ident">extension</span>
      <span class="punct">}</span>
      </pre>

      <p>When the <code>adhearsion</code> context jumps to the <code>player</code> context, you may think both contexts will speak the same number. It actually won't for a slightly technical reason:</p>

      <p>When <code>extension</code> is defined with the <code>=</code> sign, Ruby will make that into a local variable and "shadow" anything else in a higher scope that may have that same name. Because the method <code>extension</code> is in a higher scope, the local variable will take precedence, but <em>only in the local scope</em>. The <code>player</code> context has its own, separate scope and, therefore, the <code>extension</code> instance method is used.</p>

      <p>To share information between contexts, simply use Ruby instance variables. We can rewrite the previous example properly as follows:</p>

      <pre class="syntax-ruby"><span class="ident">adhearsion</span> <span class="punct">{</span>
        <span class="attribute">@extension</span> <span class="punct">=</span> <span class="ident">extension</span> <span class="punct">+</span> <span class="number">1</span>
        <span class="ident">play</span> <span class="attribute">@extension</span>
        <span class="punct">+</span><span class="ident">player</span>
      <span class="punct">}</span>
      <span class="ident">player</span> <span class="punct">{</span>
        <span class="ident">play</span> <span class="attribute">@extension</span>
      <span class="punct">}</span>
      </pre>

      <p>All contexts will run within the same Execution Environment object and therefore all instance variables will remain in scope no matter how many times you jump around.</p>
          </div>
        </div>

        <div class="example">
          <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Receiving keypad input</a></h3>
          <div class="content-html">
            <p>Taking input via phone keypad input is extremely simple.</p>

      <pre class="syntax-ruby"><span class="ident">desired_extension</span> <span class="punct">=</span> <span class="ident">input</span>
      </pre>

      <p>The example above shows a Ruby principle at work: <em>convention over configuration</em>. All of <a href="http://api.adhearsion.com/Adhearsion/VoIP/Asterisk/Commands.html#input-instance_method"><code>input</code></a>'s parameters are optional. The code above simply receives any number of digits with no timeout until the user presses the "#" key. The result is then bound to the <code>desired_extension</code> variable with the delimiting "#" removed.</p>

      <p>Or you can explicitly receive a number of digits with a timeout.</p>

      <pre class="syntax-ruby"><span class="ident">desired_extension</span> <span class="punct">=</span> <span class="ident">input</span> <span class="number">3</span><span class="punct">,</span> <span class="symbol">:timeout</span> <span class="punct">=&gt;</span> <span class="number">1</span><span class="punct">.</span><span class="ident">minute</span>
      </pre>

      <p>This takes in three digits, waiting up to one minute for each successive key entry. Though a one minute timeout is a bit contrived, this example shows an interesting feature of Ruby: everything, even numbers, is an object. Objects have methods, therefore a <code>minute</code> method makes perfect sense.</p>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Joining a conference bridge</a></h3>
    <div class="content-html">
      <p>Want the user to join a conference bridge? Just tell them to <a href="http://api.adhearsion.com/Adhearsion/VoIP/Asterisk/Commands.html#join-instance_method">join</a> something.</p>

      <pre class="syntax-ruby"><span class="ident">join</span> <span class="punct">"</span><span class="string">sales</span><span class="punct">"</span>
      </pre>

      <p>You can make the conference name virtually anything. For example, if you create a web-based tool to manage your company's conferences, you can make the conference name the unique ID of that conference's database record.</p>

      <p>The join method uses the Asterisk <a href="http://www.voip-info.org/wiki-Asterisk+cmd+MeetMe">MeetMe</a> application. Alternatively, you may use the add-on application <a href="http://www.voip-info.org/wiki/view/Asterisk+cmd+Conference">Conference</a> using the <a href="http://api.adhearsion.com/Adhearsion/VoIP/Asterisk/Commands.html#execute-instance_method">execute</a> method as follows:</p>

      <pre class="syntax-ruby">
        <span class="ident">execute</span><span class="punct">("</span><span class="string">Conference</span><span class="punct">",</span> <span class="punct">"</span><span class="string">room/S</span><span class="punct">")</span>
      </pre>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Using dialplan contexts</a></h3>
    <div class="content-html">
      <p>The Adhearsion dialplan.rb mirrors the Asterisk concept of a context. Within the <a href="http://www.voip-info.org/tiki-index.php?page=Asterisk%20config%20extensions.conf">extensions.conf</a> file of Asterisk you may have these <a href="http://www.voip-info.org/wiki-Asterisk+Dialplan+Introduction">contexts</a>:</p>

      <pre><code>[from_dallas]
      exten =&gt; _X.,1,AGI(agi://localhost)
      exten =&gt; _X.,n,Hangup

      [from_chicago]
      exten =&gt; _X.,1,AGI(agi://localhost)
      exten =&gt; _X.,n,Hangup
      </code>
      </pre>

      <p>You would then have these corresponding contexts in the Adhearsion dialplan.rb:</p>

      <pre class="syntax-ruby"><span class="ident">from_texas</span> <span class="punct">{</span>
        <span class="ident">play</span> <span class="punct">'</span><span class="string">hello</span><span class="punct">',</span> <span class="punct">'</span><span class="string">texas</span><span class="punct">'</span>
        <span class="comment"># do more here</span>
      <span class="punct">}</span>

      <span class="ident">from_illinois</span> <span class="punct">{</span>
        <span class="ident">play</span> <span class="punct">'</span><span class="string">hello</span><span class="punct">',</span> <span class="punct">'</span><span class="string">illinois</span><span class="punct">'</span>
        <span class="comment"># do more here</span>
      <span class="punct">}</span>
      </pre>

      <p>Further, you may have additional contexts in the Adhearsion dialplan.rb that may be mixed in as follows:</p>

      <pre class="syntax-ruby"><span class="ident">from_omaha</span> <span class="punct">{</span>
        <span class="ident">play</span> <span class="punct">'</span><span class="string">hello</span><span class="punct">',</span> <span class="punct">'</span><span class="string">omaha</span><span class="punct">',</span> <span class="punct">'</span><span class="string">and</span><span class="punct">'</span>
        <span class="punct">+</span><span class="ident">from_nebraska</span>
      <span class="punct">}</span>

      <span class="ident">from_nebraska</span> <span class="punct">{</span>
        <span class="ident">play</span> <span class="punct">'</span><span class="string">hello</span><span class="punct">',</span> <span class="punct">'</span><span class="string">nebraska</span><span class="punct">'</span>
        <span class="comment"># do more here</span>
      <span class="punct">}</span>
      </pre>

      <p>With this feature you may have reusable code in contexts within dialplan.rb.</p>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Simple menu example</a></h3>
    <div class="content-html">
      <p>The <a href="http://api.adhearsion.com/Adhearsion/VoIP/Asterisk/Commands.html#menu-instance_method">menu</a> command solves the problem of building enormous input-fetching state machines in Ruby without first-class message passing facilities or an external DSL. In otherwords, build complex menus to collect actionable user input via <a href="http://en.wikipedia.org/wiki/Dtmf">DTMF</a>.</p>

<p>Here is an example dialplan which uses the menu command effectively:</p>

      <pre class="syntax-ruby"><span class="ident">from_pstn</span> <span class="punct">{</span>
        <span class="ident">menu</span> <span class="punct">'</span><span class="string">welcome</span><span class="punct">',</span> <span class="punct">'</span><span class="string">for-spanish-press-8</span><span class="punct">',</span> <span class="punct">'</span><span class="string">main-ivr</span><span class="punct">',</span>
             <span class="symbol">:timeout</span> <span class="punct">=&gt;</span> <span class="number">8</span><span class="punct">.</span><span class="ident">seconds</span><span class="punct">,</span> <span class="symbol">:tries</span> <span class="punct">=&gt;</span> <span class="number">3</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">link</span><span class="punct">|</span>
          <span class="ident">link</span><span class="punct">.</span><span class="ident">shipment_status</span>  <span class="number">1</span>
          <span class="ident">link</span><span class="punct">.</span><span class="ident">ordering</span>         <span class="number">2</span>
          <span class="ident">link</span><span class="punct">.</span><span class="ident">representative</span>   <span class="number">4</span>
          <span class="ident">link</span><span class="punct">.</span><span class="ident">spanish</span>          <span class="number">8</span>
          <span class="ident">link</span><span class="punct">.</span><span class="ident">employee</span>         <span class="number">900</span><span class="punct">..</span><span class="number">999</span>

          <span class="ident">link</span><span class="punct">.</span><span class="ident">on_invalid</span> <span class="punct">{</span> <span class="ident">play</span> <span class="punct">'</span><span class="string">invalid</span><span class="punct">'</span> <span class="punct">}</span>

          <span class="ident">link</span><span class="punct">.</span><span class="ident">on_premature_timeout</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">str</span><span class="punct">|</span>
            <span class="ident">play</span> <span class="punct">'</span><span class="string">sorry</span><span class="punct">'</span>
          <span class="keyword">end</span>

          <span class="ident">link</span><span class="punct">.</span><span class="ident">on_failure</span> <span class="keyword">do</span>
            <span class="ident">play</span> <span class="punct">'</span><span class="string">goodbye</span><span class="punct">'</span>
            <span class="ident">hangup</span>
          <span class="keyword">end</span>
        <span class="keyword">end</span>
      <span class="punct">}</span>

      <span class="ident">shipment_status</span> <span class="punct">{</span>
        <span class="comment"># Fetch a tracking number and pass it to a web service.</span>
      <span class="punct">}</span>

      <span class="ident">ordering</span> <span class="punct">{</span>
        <span class="comment"># Enter another menu that lets them enter credit card</span>
        <span class="comment"># information and place their order over the phone.</span>
      <span class="punct">}</span>

      <span class="ident">representative</span> <span class="punct">{</span>
        <span class="comment"># Place the caller into a queue</span>
      <span class="punct">}</span>

      <span class="ident">spanish</span> <span class="punct">{</span>
        <span class="comment"># Special options for the spanish menu.</span>
      <span class="punct">}</span>

      <span class="ident">employee</span> <span class="punct">{</span>
        <span class="ident">dial</span> <span class="punct">"</span><span class="string">SIP/<span class="expr">#{extension}</span></span><span class="punct">"</span> <span class="comment"># Overly simplistic</span>
      <span class="punct">}</span>
      </pre>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Executing arbitrary Asterisk commands</a></h3>
    <div class="content-html">
      <p>While Adhearsion provides an extensive set of methods to <code>dialplan.rb</code> files, there may be times you want to execute an Asterisk command (known as an "application" in Asterisk parlance) that has not been exposed by Adhearsion.</p>

      <p>The <a href="http://api.adhearsion.com/Adhearsion/VoIP/Asterisk/Commands.html#execute-instance_method"><code>execute</code></a> method accepts as its first argument the name of the Asterisk command followed by an arbitrarily long sequence of arguments.</p>

      <pre class="syntax-ruby"><span class="ident">execute</span> <span class="punct">"</span><span class="string">DISA</span><span class="punct">",</span> <span class="number">1234</span><span class="punct">,</span> <span class="punct">"</span><span class="string">disa_context</span><span class="punct">"</span>
      </pre>

      <p>Voip-Info.org has an extensive list of the available Asterisk commands <a href="http://www.voip-info.org/wiki-Asterisk+-+documentation+of+application+commands">here</a>.</p>

      <p><strong>Note:</strong> Asterisk itself has no dialplan-level concept of arguments. The example above is equivalent to <code>DISA(1234|disa_context)</code> in <code>extensions.conf</code>. When Asterisk runs the DISA command, it passes the arguments between the parenthesis as a <strong>raw string</strong> and it's up to the application to parse it. For this reason, you may need to pass a String as the second argument to <code>execute</code> to manually format a finicky command's arguments.</p>
    </div>
  </div>

</div>

<h2>Relational database examples</h2>

<p>These examples show basic usage of ActiveRecord, an Object Relational Mapper library for accessing relational data from popular relational databases such as MySQL, PostgreSQl, or sqlite3 as if they were Ruby objects.</p>

<div class="examples">

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Writing an ActiveRecord &quot;model&quot;</a></h3>
    <div class="content-html">
      <p>ActiveRecord is an <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">object-relational mapper (ORM)</a> for Ruby which makes persistent database data look exactly like Ruby objects. Because ActiveRecord handles all of the SQL for you, it will work on virtually <em>any</em> SQL server for which it has adapters.</p>

      <p>If you are not using Rails, then you may still want to access a database with your own models, which is possible with Adhearsion. When building a model, you are simply creating a class that represents the table definition as the class (ie - the columns) while each row becomes an instantiated object of that class.</p>

      <p>One thing to keep in mind is that ActiveRecord works with <a href="http://mandhro.com/2006/06/16/designing-databases-with-activerecord-conventions/">conventions</a> so you will want to do some research on the best way to design your database (don't worry, AR may do legacy stuff too).</p>

      <p>With this in mind, if you have two tables named 'customers' and 'orders' you may create their models as follows:</p>

      <pre class="syntax-ruby"><span class="keyword">class </span><span class="class">Customer</span> <span class="punct">&lt;</span> <span class="constant">ActiveRecord</span><span class="punct">::</span><span class="constant">Base</span>
      <span class="keyword">end</span>

      <span class="keyword">class </span><span class="class">Order</span> <span class="punct">&lt;</span> <span class="constant">ActiveRecord</span><span class="punct">::</span><span class="constant">Base</span>
      <span class="keyword">end</span>
      </pre>

      <p>As long as you have followed conventions, that is it really. Then you may reference the table rows as follows:</p>

      <pre class="syntax-ruby"><span class="ident">customers</span> <span class="punct">=</span> <span class="constant">Customer</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="symbol">:all</span><span class="punct">)</span>
      <span class="ident">customers</span><span class="punct">.</span><span class="ident">each</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">customer</span><span class="punct">|</span>
        <span class="ident">puts</span> <span class="ident">customer</span><span class="punct">.</span><span class="ident">first_name</span> <span class="punct">+</span> <span class="punct">"</span><span class="string"> </span><span class="punct">"</span> <span class="punct">+</span> <span class="ident">customer</span><span class="punct">.</span><span class="ident">last_name</span>
      <span class="keyword">end</span>
      </pre>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Iterating over all records in a table</a></h3>
    <div class="content-html">
      <p>With Adhearsion it is easy to access an <a href="http://en.wikipedia.org/wiki/RDBMS">RDBMS</a> either through Rails or directly with <a href="http://api.rubyonrails.org/classes/ActiveRecord/Base.html">ActiveRecord</a>. Once you have your models setup, you may fetch information in a database and then iterate over it in your dialplan.rb.</p>

      <p>In this example we will show pulling information from a database to build a <a href="http://en.wikipedia.org/wiki/Text_to_speech">text to speech (TTS)</a> audio file to playback to the caller.</p>

      <pre class="syntax-ruby"><span class="comment"># my_model.rb</span>
      <span class="keyword">class </span><span class="class">ParkingLot</span> <span class="punct">&lt;</span> <span class="constant">ActiveRecord</span><span class="punct">::</span><span class="constant">Base</span>
      <span class="keyword">end</span>

      <span class="comment"># dialplan.rb</span>
      <span class="ident">parking_spaces_available</span> <span class="punct">{</span>
        <span class="ident">message</span> <span class="punct">=</span> <span class="punct">"</span><span class="string">Welcome to the parking info service.</span><span class="punct">"</span>

        <span class="comment"># Fetch the parking lot details from the database</span>
        <span class="ident">parking_lots</span> <span class="punct">=</span> <span class="constant">ParkingLot</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="symbol">:all</span><span class="punct">)</span>

        <span class="comment"># Then iterate over the results to build a menu</span>
        <span class="ident">parking_lots</span><span class="punct">.</span><span class="ident">each</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">parking_lot</span><span class="punct">|</span>
          <span class="ident">message</span> <span class="punct">=</span> <span class="ident">message</span> <span class="punct">+</span> <span class="punct">"</span><span class="string"> </span><span class="punct">"</span> <span class="punct">+</span>
                    <span class="ident">parking_lot</span><span class="punct">.</span><span class="ident">name</span> <span class="punct">+</span> <span class="punct">"</span><span class="string"> has </span><span class="punct">"</span> <span class="punct">+</span>
                    <span class="ident">parking_lot</span><span class="punct">.</span><span class="ident">spaces</span><span class="punct">.</span><span class="ident">to_s</span> <span class="punct">+</span>
                    <span class="punct">"</span><span class="string">spaces available.</span><span class="punct">"</span>
        <span class="keyword">end</span>

        <span class="comment"># Then if you have Festival TTS installed you may</span>
        <span class="comment"># build your TTS file and play it back to the caller</span>
        <span class="ident">filename</span> <span class="punct">=</span> <span class="punct">"</span><span class="string">parking_spaces_available.ulaw</span><span class="punct">"</span>
        <span class="ident">system</span><span class="punct">("</span><span class="string">echo <span class="expr">#{message}</span> | text2wave -o <span class="expr">#{filename}</span> -otype ulaw</span><span class="punct">")</span>
        <span class="ident">play</span> <span class="ident">filename</span>
      <span class="punct">}</span>
      </pre>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Finding the first record by a column value</a></h3>
    <div class="content-html">
      <p>In this example we will show finding one record from the database and using information from that row.</p>

      <pre class="syntax-ruby"><span class="comment"># my_model.rb</span>
      <span class="keyword">class </span><span class="class">ParkingLot</span> <span class="punct">&lt;</span> <span class="constant">ActiveRecord</span><span class="punct">::</span><span class="constant">Base</span>
      <span class="keyword">end</span>

      <span class="comment"># dialplan.rb</span>
      <span class="ident">parking_lot_menu</span> <span class="punct">{</span>
        <span class="ident">menu</span> <span class="punct">'</span><span class="string">welcome</span><span class="punct">',</span> <span class="punct">'</span><span class="string">for-bush-st-press1</span><span class="punct">',</span> <span class="punct">'</span><span class="string">for-hyde-press2</span><span class="punct">',</span>
             <span class="symbol">:timeout</span> <span class="punct">=&gt;</span> <span class="number">8</span><span class="punct">.</span><span class="ident">seconds</span><span class="punct">,</span> <span class="symbol">:tries</span> <span class="punct">=&gt;</span> <span class="number">3</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">link</span><span class="punct">|</span>

          <span class="ident">link</span><span class="punct">.</span><span class="ident">bush_st</span> <span class="number">1</span>
          <span class="ident">link</span><span class="punct">.</span><span class="ident">hyde_st</span> <span class="number">2</span>
       <span class="punct">}</span>

       <span class="ident">bush_st</span> <span class="punct">{</span>
         <span class="comment"># Here you may see we find the parking lot name</span>
         <span class="comment"># based on the column 'name'</span>
         <span class="ident">parking_lot</span> <span class="punct">=</span> <span class="constant">ParkingLot</span><span class="punct">.</span><span class="ident">find</span><span class="punct">(</span><span class="symbol">:first</span><span class="punct">,</span>
                                       <span class="symbol">:conditions</span> <span class="punct">=&gt;</span> <span class="punct">{</span> <span class="symbol">:name</span> <span class="punct">=&gt;</span> <span class="punct">"</span><span class="string">Bush St</span><span class="punct">"</span> <span class="punct">})</span>

         <span class="ident">play</span> <span class="punct">"</span><span class="string">bush-st-has</span><span class="punct">",</span> <span class="ident">parking_lot</span><span class="punct">.</span><span class="ident">spaces</span><span class="punct">,</span> <span class="punct">"</span><span class="string">spaces-available</span><span class="punct">"</span>
       <span class="punct">}</span>

       <span class="ident">hyde_st</span> <span class="punct">{</span>
         <span class="comment"># Do the same thing here</span>
       <span class="punct">}</span>
      </pre>
    </div>
  </div>

</div>

<h2>Working with Components</h2>

<p>Adhearsion's <a href="http://docs.adhearsion.com/display/adhearsion/Components">component</a> system is a robust way of developing plugins to the framework. Trading telephony functionality in the past has been prohibitively difficult because telephony platforms are closed or monolithic. The component system allows the industry to take a step forward and start trading open-source telephony functionality.
Functionality that you might trade with components varies quite a bit. You may want to trade something as simple as a single new dialplan method or something as complex as a full embedded web GUI. The examples below should help </p>

<div class="examples">

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Creating a new component</a></h3>
    <div class="content-html">
      <p>Creating a new <a href="http://docs.adhearsion.com/display/adhearsion/Components">component</a> is easy with the built-in Adhearsion generators. From within your ~/ahn_project/ directory type:</p>

      <pre><code>ahn create component my_shiny_new_component
      </code></pre>

      <p>With this you get a directory and files as follows:</p>

      <pre><code># Directory
      ~/ahn_project/components/my_shiny_new_component

      # The files created are
      ~/ahn_project/components/my_shiny_new_component.rb
      ~/ahn_project/components/my_shiny_new_component.yml
      </code></pre>

      <p>You may then disable the component as follows:</p>

      <pre><code>ahn disable component my_shiny_new_component
      </code></pre>

      <p>And enable as follows:</p>

      <pre><code>ahn enable component my_shiny_new_component
      </code></pre>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Adding a new dialplan method</a></h3>
    <div class="content-html">
      <p>Now that you have created your component, you may begin to create methods accessible to the different subsystems of Adhearsion. To add a method in your component that becomes available to your dialplan.rb, simply do the following:</p>

      <pre class="syntax-ruby"><span class="comment"># In your my_shiny_new_component.rb file</span>
      <span class="ident">methods_for</span> <span class="symbol">:dialplan</span> <span class="keyword">do</span>
        <span class="keyword">def </span><span class="method">count_to_ten</span>
          <span class="ident">cnt</span> <span class="punct">=</span> <span class="number">0</span>
          <span class="keyword">while</span> <span class="ident">cnt</span> <span class="punct">&lt;</span> <span class="number">11</span>
            <span class="ident">cnt</span> <span class="punct">+=</span> <span class="number">1</span>
          <span class="keyword">end</span>
          <span class="keyword">return</span> <span class="ident">cnt</span>
        <span class="keyword">end</span>
      <span class="keyword">end</span>

      <span class="comment"># Then in your dialplan.rb the method is available</span>
      <span class="ident">inbound</span> <span class="punct">{</span>
        <span class="ident">ten</span> <span class="punct">=</span> <span class="ident">count_to_ten</span>
      <span class="punct">}</span>
      </pre>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Defining a globally-recognized method</a></h3>
    <div class="content-html">
      <p>Any component methods defined within the :global scope will be available anywhere in the Ruby process.</p>

      <pre class="syntax-ruby"><span class="ident">methods_for</span> <span class="symbol">:global</span> <span class="keyword">do</span>
        <span class="keyword">def </span><span class="method">open_door</span>
          <span class="constant">RestClient</span><span class="punct">.</span><span class="ident">get</span><span class="punct">("</span><span class="string">http://front-door/control/open</span><span class="punct">")</span>
        <span class="keyword">end</span>
      <span class="keyword">end</span>
      </pre>

      <p>When methods are defined in the global scope, you should make the assumption that you will only have access to other globally-available methods. Don't use dialplan methods such a <code>play</code> in your global methods; this would work when your dialplan calls the global method but blow up when another part of the framework calls it.</p>
    </div>
  </div>

</div>

<h2>Events examples</h2>

<p>An Adhearsion application may have much more going on than just call handling. What if you want to do something when a call hangup happens? What if you want to do something when an instant message is received? The asynchronous Adhearsion events subsystem lets you handle these actions concurrently.</p>

<div class="examples">

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Handling a telephony platform event with a particular name</a></h3>
    <div class="content-html">
      <p>The events.rb subsystem provides all events that the Asterisk <a href="http://www.voip-info.org/tiki-index.php?page=Asterisk%20config%20manager.conf">manager.conf</a> specifies for that user. Therefore you may want to deal with only certain events to trigger various actions.</p>

      <p>In the events.rb you may do something like this:</p>

      <pre class="syntax-ruby"><span class="ident">events</span><span class="punct">.</span><span class="ident">asterisk</span><span class="punct">.</span><span class="ident">manager_interface</span><span class="punct">.</span><span class="ident">each</span> <span class="keyword">do</span> <span class="punct">|</span><span class="ident">event</span><span class="punct">|</span>

        <span class="comment"># I always downcase so I do not have to remember too much</span>
        <span class="keyword">case</span> <span class="ident">event</span><span class="punct">.</span><span class="ident">name</span><span class="punct">.</span><span class="ident">downcase</span>
        <span class="keyword">when</span> <span class="punct">"</span><span class="string">newstate</span><span class="punct">"</span>
          <span class="comment"># If the call was answered </span>
          <span class="keyword">if</span> <span class="ident">event</span><span class="punct">.</span><span class="ident">headers</span><span class="punct">["</span><span class="string">State</span><span class="punct">"]</span> <span class="punct">==</span> <span class="punct">"</span><span class="string">Up</span><span class="punct">"</span>
            <span class="comment"># do something</span>
          <span class="keyword">end</span>
        <span class="keyword">when</span> <span class="punct">"</span><span class="string">hangup</span><span class="punct">"</span>
          <span class="comment"># do something</span>
        <span class="keyword">end</span>

      <span class="keyword">end</span>
      </pre>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Run code after Adhearsion fully initializes</a></h3>
    <div class="content-html">
      <p>In your component, just register a callback for the <code>:after_initialized</code> namespace.</p>

      <pre class="syntax-ruby"> <span class="ident">initialization</span> <span class="keyword">do</span>
        <span class="constant">Events</span><span class="punct">.</span><span class="ident">register_callback</span> <span class="symbol">:after_initialized</span> <span class="keyword">do</span>
          <span class="ident">ahn_log</span> <span class="punct">"</span><span class="string">Do stuff here!</span><span class="punct">"</span>
        <span class="keyword">end</span>
      <span class="keyword">end</span>
      </pre>
    </div>
  </div>

</div>

<h2>Other web framework examples</h2>

<p>These examples show how to build web interfaces for Adhearsion with frameworks other than Ruby on Rails.</p>

<div class="examples">

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Talking to your Adhearsion app from PHP</a></h3>
    <div class="content-html">
      <p>Below is a sample PHP class you can use to talk with the Adhearsion <code>restful_rpc</code> component. The <code>restful_rpc</code> component comes disabled by default in all newly-generated applications.</p>

      <pre><code>&lt;?php

      // Define an Adhearsion PHP class for a REST HTTP connection
      class Adhearsion {

        public $url;
        public $username;
        public $password;

        function __construct($url, $username, $password) {
          $this-&gt;url = $url;
          $this-&gt;username = $username;
          $this-&gt;password = $password;
        }

        function invoke($method_name) {
          $json = json_encode(array_slice(func_get_args(), 1));

          $url = "$this-&gt;url/$method_name";
          return json_decode(http_post_data($url,
                                            $json,
                                            array("httpauth" =&gt; "$this-&gt;username:$this-&gt;password")));
        }

      }

      // Connect to the REST API of Adhearsion
      $ahn = new Adhearsion("localhost:5000", "jicksta", "roflcopterz");

      //Build an array of the options for calling
      $call_options = array(array ('channel' =&gt; 'SIP/303',
                             'context' =&gt; 'inbound',
                             'exten' =&gt; '1000',
                             'priority' =&gt; '1',
                             'async' =&gt; 'true',
                             'variable' =&gt; 'destination=304');

      // Invoke the Adhearsion originate method via an HTTP POST of a JSON object
      $ahn-&gt;invoke("call_into_context", $call_options);
      ?&gt;
      </code>
      </pre>

      <p>In this example, it does an "origination" to asynchronously call out to a SIP extension (103 in this case). When the callee answers, it will start executing the <code>inbound</code> Adhearsion context. In dialplan example below, we're extracting a variable set in the origination and using it to dial out again.</p>

      <pre class="syntax-ruby"><span class="ident">inbound</span> <span class="punct">{</span>
        <span class="ident">dial</span> <span class="punct">"</span><span class="string">SIP/<span class="expr">#{get_variable('destination')}</span></span><span class="punct">"</span>
      <span class="punct">}</span>
      </pre>
    </div>
  </div>

</div>

<h2>Using web services</h2>

<p>Adhearsion helps you integrate voice into your business and web services which are the <i>lingua franca</i> of most businesses' internal systems.</p>

<div class="examples">

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Consuming RESTful resources</a></h3>
    <div class="content-html">
      <p>Adhearsion has a great RPC interface out of the box that may be accessed via <a href="http://en.wikipedia.org/wiki/Representational_State_Transfer">REST</a>. You may then access Adhearsion objects and methods from virtually any modern lanugage. In this case we will show Ruby consuming the web services (keep in mind Adhearsion uses <a href="http://en.wikipedia.org/wiki/Json">JSON</a>): </p>

      <pre class="syntax-ruby"><span class="ident">require</span> <span class="punct">'</span><span class="string">json</span><span class="punct">'</span>
      <span class="ident">require</span> <span class="punct">'</span><span class="string">rest_client</span><span class="punct">'</span>

      <span class="comment"># First we create the class that handles the connection</span>
      <span class="keyword">class </span><span class="class">RESTfulAdhearsion</span>

        <span class="constant">DEFAULT_OPTIONS</span> <span class="punct">=</span> <span class="punct">{</span>
          <span class="comment"># Note: :user and :password are non-existent by default</span>
          <span class="symbol">:host</span>         <span class="punct">=&gt;</span> <span class="punct">"</span><span class="string">localhost</span><span class="punct">",</span>
          <span class="symbol">:port</span>         <span class="punct">=&gt;</span> <span class="punct">"</span><span class="string">5000</span><span class="punct">",</span>
          <span class="symbol">:path_nesting</span> <span class="punct">=&gt;</span> <span class="punct">"</span><span class="string">/</span><span class="punct">"</span>
        <span class="punct">}</span>

        <span class="keyword">def </span><span class="method">initialize</span><span class="punct">(</span><span class="ident">options</span><span class="punct">={})</span>
          <span class="attribute">@options</span> <span class="punct">=</span> <span class="constant">DEFAULT_OPTIONS</span><span class="punct">.</span><span class="ident">merge</span> <span class="ident">options</span>

          <span class="attribute">@path_nesting</span> <span class="punct">=</span> <span class="attribute">@options</span><span class="punct">.</span><span class="ident">delete</span> <span class="symbol">:path_nesting</span>
          <span class="attribute">@host</span> <span class="punct">=</span> <span class="attribute">@options</span><span class="punct">.</span><span class="ident">delete</span> <span class="symbol">:host</span>
          <span class="attribute">@port</span> <span class="punct">=</span> <span class="attribute">@options</span><span class="punct">.</span><span class="ident">delete</span> <span class="symbol">:port</span>

          <span class="attribute">@url_beginning</span> <span class="punct">=</span> <span class="punct">"</span><span class="string">http://<span class="expr">#{@host}</span>:<span class="expr">#{@port}#{@path_nesting}</span></span><span class="punct">"</span>
        <span class="keyword">end</span>

        <span class="keyword">def </span><span class="method">method_missing</span><span class="punct">(</span><span class="ident">method_name</span><span class="punct">,</span> <span class="punct">*</span><span class="ident">args</span><span class="punct">)</span>
          <span class="constant">JSON</span><span class="punct">.</span><span class="ident">parse</span> <span class="constant">RestClient</span><span class="punct">::</span><span class="constant">Resource</span><span class="punct">.</span><span class="ident">new</span><span class="punct">(</span><span class="attribute">@url_beginning</span> <span class="punct">+</span> <span class="ident">method_name</span><span class="punct">.</span><span class="ident">to_s</span><span class="punct">,</span> <span class="attribute">@options</span><span class="punct">).</span><span class="ident">post</span><span class="punct">(</span><span class="ident">args</span><span class="punct">.</span><span class="ident">to_json</span><span class="punct">)</span>
        <span class="keyword">end</span>

      <span class="keyword">end</span>

      <span class="comment">#Create our Adhearsion object connected to the RESTful API of Adhearsion</span>
      <span class="constant">Adhearsion</span> <span class="punct">=</span> <span class="constant">RESTfulAdhearsion</span><span class="punct">.</span><span class="ident">new</span><span class="punct">(</span><span class="symbol">:host</span>     <span class="punct">=&gt;</span> <span class="punct">"</span><span class="string">localhost</span><span class="punct">",</span>
                                         <span class="symbol">:port</span>     <span class="punct">=&gt;</span> <span class="number">5000</span><span class="punct">,</span>
                                         <span class="symbol">:user</span>     <span class="punct">=&gt;</span> <span class="punct">"</span><span class="string">jicksta</span><span class="punct">",</span>
                                         <span class="symbol">:password</span> <span class="punct">=&gt;</span> <span class="punct">"</span><span class="string">roflcopterz</span><span class="punct">")</span>

      <span class="comment"># Then make a call to it to place a phone call</span>
      <span class="constant">Adhearsion</span><span class="punct">.</span><span class="ident">originate</span> <span class="punct">{</span> <span class="symbol">:channel</span>  <span class="punct">=&gt;</span> <span class="punct">"</span><span class="string">SIP/3000,
                             :context  =&gt; </span><span class="punct">"</span><span class="ident">outbound</span><span class="punct">"</span><span class="string">,
                             :priority =&gt; </span><span class="punct">"</span><span class="number">1</span><span class="punct">"</span><span class="string">,
                             :exten    =&gt; </span><span class="punct">"</span><span class="number">1000</span><span class="punct">"</span><span class="string">,
                             :async    =&gt; </span><span class="punct">"</span><span class="constant">true</span><span class="punct">"</span><span class="string"> }<span class="normal">
      </span></span></pre>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Consuming the Yahoo Query Language</a></h3>
    <div class="content-html">
      <p>Example consuming the <a href="http://developer.yahoo.com/yql/">Yahoo Query Language</a>. The dialplan below will ask the user for their zipcode, fetch the weather based on zipcode and then play the temperature back to the user.</p>

      <pre class="syntax-ruby"><span class="ident">sandbox</span> <span class="punct">{</span>

        <span class="ident">play</span> <span class="punct">'</span><span class="string">welcome</span><span class="punct">'</span>

        <span class="ident">response</span> <span class="punct">=</span> <span class="ident">input</span> <span class="number">5</span><span class="punct">,</span>
                   <span class="symbol">:play</span>    <span class="punct">=&gt;</span> <span class="punct">['</span><span class="string">please-enter-your</span><span class="punct">',</span> <span class="punct">'</span><span class="string">zip-code</span><span class="punct">'],</span>
                   <span class="symbol">:timeout</span> <span class="punct">=&gt;</span> <span class="number">10</span><span class="punct">,</span>
                   <span class="symbol">:retries</span> <span class="punct">=&gt;</span> <span class="number">3</span>

        <span class="ident">yahoo_url</span> <span class="punct">=</span> <span class="punct">'</span><span class="string">http://query.yahooapis.com/v1/public/yql?format=json&amp;q=</span><span class="punct">'</span>
        <span class="ident">query</span> <span class="punct">=</span> <span class="punct">"</span><span class="string">SELECT * FROM weather.forecast WHERE location = </span><span class="punct">"</span> <span class="punct">+</span> <span class="ident">response</span>

        <span class="ident">url</span> <span class="punct">=</span> <span class="constant">URI</span><span class="punct">.</span><span class="ident">encode</span><span class="punct">(</span><span class="ident">yahoo_url</span> <span class="punct">+</span> <span class="ident">query</span><span class="punct">)</span>

        <span class="ident">json_data</span> <span class="punct">=</span> <span class="ident">open</span><span class="punct">(</span><span class="ident">url</span><span class="punct">).</span><span class="ident">read</span>
        <span class="ident">weather_data</span> <span class="punct">=</span> <span class="constant">JSON</span><span class="punct">.</span><span class="ident">parse</span> <span class="ident">json_data</span>

        <span class="ident">play</span> <span class="punct">'</span><span class="string">temperature</span><span class="punct">',</span> <span class="ident">weather_data</span><span class="punct">["</span><span class="string">query</span><span class="punct">"]["</span><span class="string">results</span><span class="punct">"]["</span><span class="string">channel</span><span class="punct">"]["</span><span class="string">item</span><span class="punct">"]["</span><span class="string">condition</span><span class="punct">"]["</span><span class="string">temp</span><span class="punct">"]</span>

      <span class="punct">}</span>
      </pre>
    </div>
  </div>

</div>

<h2>Using Adhearsion with JRuby</h2>

<p>Adhearsion fully supports running on <a href="http://jruby.codehaus.org/">JRuby</a>. This section will show you how to run and leverage JRuby to get the most of of running on the <a href="http://en.wikipedia.org/wiki/Java_virtual_machine">Java Virtual Machine</a>.</p>

<div class="examples">

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Starting Adhearsion with JRuby</a></h3>
    <div class="content-html">
      <p>JRuby has its own, separate gem repository and requires gems be installed using its own gem executable. If you have the normal Ruby interpreter installed on your system you would be accustomed to using the 'gem' command to install new gems. For JRuby you may simply use 'jgem'.</p>

      <p>Adhearsion has a separate jahn executable with a shebang line of #!/usr/bin/env jruby. If your jruby is available in your path, you can simply execute jahn directly as you would the ahn command.</p>

      <pre><code>jahn start /path/to/my/app
      </code></pre>
    </div>
  </div>

</div>

<h2>Full Component Examples</h2>

<p>We have created several fully working component examples that you may download and use.</p>

<div class="examples">

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Click to call</a></h3>
    <div class="content-html">
      <p>Example component for Adhearsion showing a browser-based click to call application. Also shows how to use the RESTful API of Adhearsion.</p>

      <p>You may access the component <a href="http://github.com/jsgoecke/restful_clicktocall">here</a>.</p>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">An Adhearsion Stress Tester</a></h3>
    <div class="content-html">
      <p>The Call Tester is used to generate live inbound call load on an Asterisk or any other telephony system. The Call Tester also provides a facility to play DTMF tones at the beginning of a call in order to traverse an IVR menu and reach various inbound call routes. The intent is use this facility in both engineering QA as well as a tool for operations in the field to load test each and every Asterisk or voice platform implementation. </p>

      <p>You may download the component <a href="http://github.com/jsgoecke/call-tester">here</a>.</p>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Web scraping - Ann Arbor Parking</a></h3>
    <div class="content-html">
      <p>Provides an example Adhearsion component that exposes the Ann Arbor, MI parking lot space availability via an IVR. This example was inspired by the folks @ VoIP Tech Chat and their Perl example.</p>

      <p>You may download the component <a href="http://github.com/jsgoecke/annarbor_parking/">here</a>.</p>
    </div>
  </div>

  <div class="example">
    <h3 class="example-name ui-state-default ui-corner-all"><a href="#">Phone Surveys</a></h3>
    <div class="content-html">
      <p>Provides an example Adhearsion component that conducts call surveys. The component also provides a Rails GUI.</p>

      <p>You may download the component <a href="http://github.com/jsgoecke/surveys/">here</a>.</p>
    </div>
  </div>
</div>
