<h1>Dialplan Examples</h1>

<p>The following examples show sample code that may be used to write Adhearsion dialplans, the logic that handles a particular call when it comes in.</p>

<h2>Playing a sound file</h2>

<p>When using Adhearsion with Asterisk, you have <em>thousands</em> of sound files to use right out of the box. These range from the useful everyday sound files to pure novelties such as monkeys screaming and practical jokes.</p>

<pre>
  play "hello-world"
</pre>


<h2>Receiving input</h2>

<p>Taking input via phone keypad input is extremely simple.</p>

<pre>desired_extension = input</pre>

<p>The example above shows a Ruby principle at work: <strong>convention over configuration</strong>. All of <kbd>input</kbd>'s parameters are optional. The code above simply receives any number of digits with no timeout until the user presses <kbd>#</kbd>. The result is then bound to the <kbd>desired_extension</kbd> variable with the delimiting "#" removed.</p>

<p>Or you can explicitly receive a number of digits with a timeout.</p>
  
<pre>desired_extension = input 3, :timeout => 1.minute</pre>  

<p>This takes in three digits, waiting up to one minute for each successive key entry. Though a one minute timeout is a bit contrived, this example shows an interesting feature of Ruby: everything, even numbers, is an object. Objects have methods, therefore a <kbd>minute</kbd> method makes perfect sense.</p>

<h2>Conferencing</h2>

<p>Want to the user to join a conference bridge? Easy.</p>

<pre>join "sales"</pre>

<p></p>

<h2>Contexts are your friend</h2>

<pre>
incoming {
  play "weasels-eaten-phonesys"
}
internal {
  case extension
    when 1
    when 2
    when 3
    when /
  end
}
unknown {
  play 'invalid'
}</pre>

<h2>Simple menus</h2>

<p>The <kbd>menu</kbd> command lets you construct menus which cleanly </p>

<pre>
menu "welcome", "main_prompt" do |link|
  link.sales 1
  link.billing 2
  link.tech_support 3
end
</pre>

<p>When one of 1, 2, or 3 is pressed, Adhearsion will direct the call flow to contexts provided to <kbd>link</kbd>. For example, if the user presses 1, it will jump to the <kbd>sales</kbd> context.</p>

<h2>Robust menus</h2>

<p>The <kbd>menu</kbd> command lets you construct menus which cleanly </p>

<pre>
menu "prompt", :timeout => 5, :tries => 3 do |link|
  link.tens 11
  link.hundreds 101
  link.thousands 1001
  
  link.on_timeout do
    play "sorry", "pls-try-again"
  end
  
  link.on_invalid do |choice|
    play "pbx-invalid"
  end
  
  # When all tries have elapsed with no match.
  link.on_failure do
    # Let's send the caller to the operator context
    +operator
  end
  
end
</pre>

<p>This example shows the pattern matching usefulness of the menu() command. Notice how the various extensions begin with similar digits. Adhearsion filters through these in realtime as the user enters them, looking for potential and exact matches. When no more possibilities exist, Adhearsion will snap to a determination.</p>

<h2>First-class Queues</h2>

<p>When using Adhearsion with Asterisk, you have <em>thousands</em> of sound files to use right out of the box. These range from the useful everyday sound files to pure novelties such as monkeys screaming and practical jokes.</p>

<pre>
sales = queue "sales"
if sales.agents.any?
  
end
</pre>

<h1>Database Access</h1>

<p>Most Adhearsion applications use Ruby on Rails' <a href="http://en.wikipedia.org/wiki/Object-relational_mapping" title="Object-Relational Mapper">ORM</a>. If you're already familiar with Ruby, you've probably already used it.</p>

<p>If you haven't heard of ActiveRecord before, then this section is for you. ActiveRecord is a library for connecting to virtually any Relational Database Management System, such as MySQL, PostgreSQL, Microsoft SQL Server, sqlite3, etc.</p>