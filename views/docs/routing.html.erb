<div class="docs">
  <div class="full-width">
    <div class="outer-rounded-box-bold docs-nav-box">
      <div class="inner-rounded-box-filled-grey clearfix">
        <h3>Documentation</h3>
        <ul class="collapsibleList">
          <li id="docs-nav-getting-started">
            Getting Started
            <ul>
              <li id="docs-nav-getting-started-prerequisites"><a href="/docs/getting-started/prerequisites">Prerequisites</a></li>
              <li id="docs-nav-getting-started-installation"><a href="/docs/getting-started/installation">Installation</a></li>
            </ul>
          </li>
          <li id="docs-nav-console"><a href="/docs/console">Console</a></li>
          <li id="docs-nav-call-controller"><a href="/docs/call-controllers">Call Controllers</a></li>
          <li id="docs-nav-routing"><a href="/docs/routing">Routing</a></li>
          <li id="docs-nav-config"><a href="/docs/config">Config</a></li>
          <li id="docs-nav-events"><a href="/docs/events">Events</a></li>
          <li id="docs-nav-logging"><a href="/docs/logging">Logging</a></li>
          <li id="docs-nav-plugins"><a href="/docs/plugins">Plugins</a></li>
          <li id="docs-nav-best-practices">
            Best Practices
            <ul>
              <li id="docs-nav-best-practices-testing"><a href="/docs/best-practices/testing">Testing</a></li>
              <li id="docs-nav-best-practices-deployment"><a href="/docs/best-practices/deployment">Deployment</a></li>
              <li id="docs-nav-best-practices-sysadmin"><a href="/docs/best-practices/sysadmin">Notes for System Administrators</a></li>
            </ul>
          </li>
          <li id="docs-nav-upgrading"><a href="/docs/upgrading">Upgrading</a></li>
        </ul>
      </div>
    </div>

    <div class="docs-body">
<h1 id="routing"><a class="toclink" href="#routing">Routing</a></h1>
<div class="toc">
<ul>
<li><a href="#routing">Routing</a></li>
</ul>
</div>
<p>In Adhearsion 2, all calls come in to a single place, the Router. The VoIP platform, be it Asterisk, Voxeo PRISM, or anything else, does not instruct Adhearsion on how to route the call. Instead, we have a DSL for defining routes, which can have some interesting rules, in order to decide what should happen to each individual call. This lives in the application's config file, config/adhearsion.rb.</p>
<pre class="brush: ruby;">
Adhearsion.router do
  route 'Authorized callers', FooController, :to => /789/

  route 'Everyone else' do
    answer
    menu...
  end
end
</pre>

<p>The first option is a freeform route label which is used primarily for logging.  The rest of the route is a combination of its guards and its target, which may either be a particular CallController class or a block of code. You can see an example of the syntax for each above.</p>
<p>In the above example the :to attribute of the incoming Call object is matched against a regular expression. This is supplied using hash syntax. This matching syntax borrows from Jeff Smick's excellent Blather XMPP client library, called <a href="https://adhearsion.github.com/has-guarded-handlers">has-guaded-handlers</a>, which in turn borrows from the idea of <a href="http://en.wikibooks.org/wiki/Erlang_Programming/guards">Guards</a> from <a href="http://www.erlang.org/">Erlang</a>. The route will be allowed to match a call only if all of its guards are satisfied.</p>
<p>One may specify many different kinds of guards. Here are some examples:</p>
<pre class="brush: ruby;">
# This requires the call being routed to be of the type specified.
route 'foo', Adhearsion::OutboundCall

# A contrived example, but a symbol calls the matching method and
# requires a truthy response
route 'foo', :active?

# This calls the method #from and requires an exact match to the
# string specified (this can be any other type).
route 'foo', :from => 'sip:me@there.com'

# An array as the hash key requires the return value of #from to
# match one of the provided values.
route 'foo', :from => ['sip:me@there.com', 'sip:you@other.com']

# Multiple hash keys act like logical AND and thus all must match.
route 'foo', :from => 'sip:me@there.com', :to => 'sip:us@here.com'

# Elements of an array act like logical OR and thus if at least
# one matches, the guards will pass.
route 'foo', [{:from => 'sip:me@there.com'}, {:to => 'sip:us@here.com'}]

# One may provide a lambda/Proc which can perform any arbitrary
# operation upon the call object. A truthy return value passes
# the guard.
route 'foo', lambda { |call| Time.now.hour < 20 }

# For those upgrading from Adhearsion 1.x, or simply wishing to
# use Asterisk contexts as a routing key, the context name
# is accessible as a guard as well:
route 'foo', :agi_context => 'context-name'
</pre>

<div class='docs-progress-nav'>
  <span class='back'>
    Back to <a href="/docs/call-controllers">Call Controllers</a>
  </span>
  <span class='forward'>
    Continue to <a href="/docs/config">Config</a>
  </span>
</div>
    </div>

    <div id="disqus_thread"></div>
    <script type="text/javascript">
        var disqus_shortname = 'adhearsion';
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
    <a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a>

    <div class="clear"></div>
  </div>
</div>

<a href="#" id="main-nav-active" style="display:none;">#main-nav-docs</a>
