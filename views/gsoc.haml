- title "Google Summer of Code 2013", false

.inner
  .full-width
    .two-third
      %h1 Google Summer of Code 2013

      %h2 Project Ideas
      %p Adhearsion has many large features that would assist people in developing their applications with greater ease or which would allow new uses of Adhearsion which are not currently possible.

      %table.two-third.data-table-vertical{:style => 'border: none;'}
        %tr
          %td.right
            %h3 Internationalization
          %td
            %p Support for internationalisation built in to the framework as a first class feature, ensuring that applications are built internationalisation-ready by default with little effort. Should include both prompt files and TTS, and allow for a variety of methods for adding languages to an application, including a UI.
        %tr
          %td.right
            %h3 Speech Recognition
          %td
            %p Including DSL methods for collecting and interpreting speech, and renovating the existing input methods to do barge-in correctly.

        %tr
          %td.right
            %h3 Declarative IVR dialogs / dialog states
          %td
            %p Many applications which implement IVR functionality have to create a state machine for dialogs by hand, and write tests for them. Baking in support for a declarative IVR DSL to standardise this and centralise the implementation and testing burden would simplify many of these applications and make them faster to write and cheaper to maintain, as well as more understandable.

        %tr
          %td.right
            %h3 Async CallController API
          %td
            %p

        %tr
          %td.right
            %h3 First-class mixers
          %td
            %p Adhearsion currently has no support for audio mixing. Adhearsion needs to be able to track state for mixers, including participant details, simple joining and management, seamlessly moving collections of calls into a mixer, etc. This would include adding support for mixers on Asterisk based on ConfBridge.

        %tr
          %td.right
            %h3 Call center plugin (agent queue) with live dashboard
          %td
            %p
              %ul
                %li Allow hotdesking (login via user ID + PIN)
                %li Select from multiple distribution methods (round-robin, least-recently-used, ring-all)
                %li Configure multiple queues
                %li Handle agents logging in and out of individual queues
                %li Visualization for agents logged-in, calls waiting in queue

        %tr
          %td.right
            %h3 Conference call plugin with live dashboard
          %td
            %p Depends on first class mixer support

            %p
              Short list of possible features:
              %ul
                %li Enable PIN-based conference logins
                %li Creation of conference rooms via web UI
                %li Invite/Kick/Mute/Unmute individual call legs via web UI
                %li Create separate listen-only PINs and speaker PINs for the same room

        %tr
          %td.right
            %h3
              %a{:href => "https://github.com/dwilkie/adhearsion-twilio"} Adhearsion-Twilio
          %td
            %p
              %ul
                %li Add support for missing TwiML syntax
                %li Add unit tests
                %li Create example apps

        %tr
          %td.right
            %h3 SIP stress-tester profile generator with dashboard
          %td
            %p
              Often, after creating an Adhearsion application, we need to test it at scale. This usually means hand-crafting a SIPp profile and associated pcap-formatted audio file to test the application. It's a time-consuming process, and much of it could be automated. The idea is to be able to specify the load test actions in a simple format, likely YAML, and have a program convert that YAML to XML and a PCAP file. A prototype (not using SIPp) can be seen in
              %a{:href => "https://github.com/mojolingo/ahn-loadbot"} ahn_loadbot.

            %p
              The features:
              %ul
                %li
                  Take a YAML with simplified syntax and use it to generate an XML file and a PCAP audio file suitable for use with
                  %a{:href => "http://sipp.sourceforge.net/"} SIPp
                %li Ability to quickly set DTMF playtimes during the call (after pickup, wait 10 seconds, then 1-2-3..), play media, automate run-throughs of full stack components
                %li Use queuing mechanism to allow for high concurrency.
                %li Create a browser-accessible live dashboard showing the number of active calls, the number of completed calls, and the number of calls resulting in error

      %h2 How do I apply as a student?
      %p
        Send an email to
        %a{:href => "mailto:gsoc@adhearsion.com"} gsoc@adhearsion.com
        with your ideas or proposal to start the conversation.
    .one-third.last
      %h1.extra-padding-left Mentors
      %p.extra-padding-left
        %a{:href => "http://langfeld.me"}
          %img{:src => "/images/ben_langfeld.jpg", :width => "128", :height => "128", :alt => "Ben Langfeld"}
          Ben Langfeld
      %p.extra-padding-left
        %a{:href => "http://github.com/bklang"}
          %img{:src => "/images/ben_klang.jpg", :width => "128", :height => "128", :alt => "Ben Klang"}
          Ben Klang
      %p.extra-padding-left
        Want to volunteer as a mentor? Email
        %a{:href => "mailto:gsoc@adhearsion.com"} gsoc@adhearsion.com

    .clear

%a{:href => "#", :id => "main-nav-active", :style => "display:none;"} #main-nav-gsoc
